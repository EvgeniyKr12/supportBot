from sqlalchemy import select
from sqlalchemy.orm import Session

from models.direction import Direction


class DirectionService:
    def __init__(self, db: Session):
        self.db = db

    def create_direction(
        self, name: str, code: str, exams: str, min_score: int, price: int
    ):
        direction = Direction(
            name=name, code=code, exams=exams, min_score=min_score, price=price
        )
        self.db.add(direction)
        self.db.commit()
        return direction

    def get_all_directions(self):
        return self.db.query(Direction).all()

    @staticmethod
    def get_direction_info(direction: Direction) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ

        :param direction: –û–±—ä–µ–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î
        :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        exams_list = ", ".join(exam.strip() for exam in direction.exams.split(','))

        info_text = (
            f"<b>üéì {direction.name}</b> (<code>{direction.code}</code>)\n\n"
            f"<b>üìö –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã:</b> {exams_list}\n"
            f"<b>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {direction.min_score}\n"
            f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</b> {direction.price:,} —Ä—É–±./–≥–æ–¥\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
        ).replace(
            ",", "‚Äâ"
        )  # –ó–∞–º–µ–Ω–∞ –æ–±—ã—á–Ω–æ–π –∑–∞–ø—è—Ç–æ–π –Ω–∞ thin space –≤ —á–∏—Å–ª–∞—Ö

        return info_text

    def get_direction_by_code(self, code):
        stmt = select(Direction).where(Direction.code == code)
        result = self.db.execute(stmt)
        return result.scalar_one_or_none()

    def get_direction_by_id(self, direction_id: int):
        return self.db.query(Direction).filter(Direction.id == direction_id).first()

    def delete_direction(self, direction_id: int):
        direction = self.get_direction_by_id(direction_id)
        if direction:
            self.db.delete(direction)
            self.db.commit()
            return True
        return False
