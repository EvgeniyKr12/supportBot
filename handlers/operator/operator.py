from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from html import escape
from services import DialogService, UserService
from utils.logger import logger

router = Router()


@router.callback_query(F.data.startswith("take_dialog_"))
async def take_dialog(callback: CallbackQuery, bot, db: Session):
    logger.info("–û–ø–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ—Ç –¥–∏–∞–ª–æ–≥")
    user_id = int(callback.data.split("_")[-1])
    operator_id = callback.from_user.id
    dialog_service = DialogService(db)

    dialog = dialog_service.get_dialog_by_user_id(user_id)

    if not dialog:
        await callback.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        return

    if dialog.operator_id:
        await callback.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!", show_alert=True)
        return

    dialog_service.assign_operator(dialog.id, operator_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="üîí –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{dialog.id}")

    await bot.send_message(
        user_id, "üë®üíº –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!"
    )
    await callback.message.edit_text(
        f"‚úÖ –í—ã –≤–∑—è–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {user_id}\n"
        f"–í–æ–ø—Ä–æ—Å: {dialog.question}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("close_dialog_"))
async def close_dialog_handler(callback: CallbackQuery, bot, db: Session):
    logger.info("–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥")
    dialog_id = int(callback.data.split("_")[-1])
    dialog_service = DialogService(db)

    dialog = dialog_service.get_dialog_by_id(dialog_id)
    if not dialog:
        await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    dialog_service.close_dialog(user_id=dialog.user_id)

    await callback.message.edit_text("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç", reply_markup=None)
    await callback.answer()

    await bot.send_message(
        dialog.user_id,
        "‚ùå –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞.",
    )


@router.message(F.text)
async def operator_response(message: Message, bot: Bot, db: Session):
    try:
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

        user_service = UserService(db)
        privileged_users = user_service.get_privileged_users()

        if message.from_user.id not in [u.id for u in privileged_users]:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
            return

        dialog_service = DialogService(db)
        dialog = dialog_service.get_dialog_by_operator(message.from_user.id)

        if not dialog or not hasattr(dialog, 'user_id'):
            logger.error(f"–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
            return

        try:
            await bot.send_message(
                chat_id=dialog.user_id,
                text=f"üë®üíº –û–ø–µ—Ä–∞—Ç–æ—Ä:\n\n{escape(message.text)}",
                parse_mode="HTML"
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {dialog.user_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ operator_response: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")