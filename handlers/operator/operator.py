from html import escape

from aiogram import Bot, F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session

from models import UserType
from services import DialogService, UserService, DirectionService
from utils.logger import logger

router = Router()


@router.callback_query(F.data.startswith("take_dialog_"))
async def take_dialog(callback: CallbackQuery, bot, db: Session):
    logger.info("–û–ø–µ—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ—Ç –¥–∏–∞–ª–æ–≥")
    user_id = int(callback.data.split("_")[-1])
    operator_id = callback.from_user.id

    user_service = UserService(db)
    direction_service = DirectionService(db)
    dialog_service = DialogService(db)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_service.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_dialog = dialog_service.get_dialog_by_user_id(user_id)
    if not new_dialog:
        await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        return
    if new_dialog.operator_id:
        await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!", show_alert=True)
        return

    # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    current_dialog = dialog_service.get_dialog_by_operator(operator_id)
    if current_dialog:
        dialog_service.close_dialog(current_dialog.id)
        try:
            await bot.send_message(
                current_dialog.user_id,
                "‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_dialog.user_id}: {e}")

    # 4. –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    dialog_service.assign_operator(new_dialog.id, operator_id)

    # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    direction = direction_service.get_direction_by_id(user.direction_id) if user.direction_id else None
    user_type_text = {
        UserType.PARENT: "–†–æ–¥–∏—Ç–µ–ª—å",
        UserType.APPLICANT: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç",
        UserType.OTHER: "–î—Ä—É–≥–æ–µ"
    }.get(user.type, "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(
        user_id,
        "üë®üíº –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã!"
    )

    message_text = (
        f"‚úÖ –í—ã –≤–∑—è–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:\n"
        f"üÜî ID: {user.tg_id}\n"
        f"üë§ Username: @{user.username or '‚Äî'}\n"
        f"üéØ –¢–∏–ø: {user_type_text}\n"
        f"üìò –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction.name if direction else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å: {new_dialog.question}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="üîí –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{new_dialog.id}")

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
    )
    await callback.answer()



@router.callback_query(F.data.startswith("close_dialog_"))
async def close_dialog_handler(callback: CallbackQuery, bot, db: Session):
    logger.info("–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥")
    dialog_id = int(callback.data.split("_")[-1])
    dialog_service = DialogService(db)

    dialog = dialog_service.get_dialog_by_id(dialog_id)
    if not dialog:
        await callback.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    dialog_service.close_dialog(user_id=dialog.user_id)

    await callback.message.edit_text("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç", reply_markup=None)
    await callback.answer()

    await bot.send_message(
        dialog.user_id,
        "‚ùå –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞.",
    )


@router.message(F.text)
async def operator_response(message: Message, bot: Bot, db: Session):
    try:
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

        user_service = UserService(db)
        privileged_users = user_service.get_privileged_users()

        if message.from_user.id not in [u.id for u in privileged_users]:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
            return

        dialog_service = DialogService(db)
        dialog = dialog_service.get_dialog_by_operator(message.from_user.id)

        if not dialog or not hasattr(dialog, 'user_id'):
            logger.error(f"–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
            return

        try:
            await bot.send_message(
                chat_id=dialog.user_id,
                text=f"üë®üíº –û–ø–µ—Ä–∞—Ç–æ—Ä:\n\n{escape(message.text)}",
                parse_mode="HTML",
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {dialog.user_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ operator_response: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
