from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from config.constants import load_questions, save_questions
from data.state import AdminStates
from services import UserService
from utils.access import is_admin


router = Router()


@router.callback_query(F.data == "show_questions")
async def show_questions(callback: CallbackQuery, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        questions = load_questions()
        if not questions:
            await callback.message.answer("üì≠ –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = "\n\n".join([f"‚ùì {q}\nüí¨ {a}" for q, a in questions.items()])
            await callback.message.answer(f"üìö –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{text}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    await callback.answer()


@router.callback_query(F.data == "add_question")
async def ask_new_question(callback: CallbackQuery, state: FSMContext, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AdminStates.waiting_for_new_question_text)
    await callback.answer()


@router.message(AdminStates.waiting_for_new_question_text)
async def receive_question_text(message: Message, state: FSMContext):
    await state.update_data(question_text=message.text.strip())
    await message.answer("üí¨ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AdminStates.waiting_for_new_answer_text)


@router.message(AdminStates.waiting_for_new_answer_text)
async def receive_answer_text(message: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("question_text")
    answer = message.text.strip()

    try:
        questions = load_questions()
        questions[question] = answer
        save_questions(questions)
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_question")
async def ask_question_to_remove(
    callback: CallbackQuery, state: FSMContext, db: Session
):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    questions = load_questions()
    if not questions:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await callback.answer()
        return

    question_list = "\n".join([f"‚Ä¢ {q}" for q in questions.keys()])
    await callback.message.answer(
        f"üìÑ –¢–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{question_list}\n\n‚úÇÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
    )
    await state.set_state(AdminStates.waiting_for_question_removal)
    await callback.answer()


@router.message(AdminStates.waiting_for_question_removal)
async def remove_question(message: Message, state: FSMContext):
    question = message.text.strip()
    try:
        questions = load_questions()
        if question not in questions:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            del questions[question]
            save_questions(questions)
            await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    await state.clear()
