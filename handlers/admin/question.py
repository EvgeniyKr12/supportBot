from typing import Union

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from config.constants import load_questions, save_questions
from data.state import AdminStates
from keyboards.admin.reply.admin import get_manager_kb
from keyboards.admin.reply.question import get_question_management_kb
from keyboards.admin.text import ButtonText
from utils.access import check_admin_access

router = Router()


@router.callback_query(F.data == "question_management")
@router.message(F.text == ButtonText.AdminMenu.QUESTION_PANEL)
@router.message(Command("questions"))
async def question_panel_handler(update: Union[CallbackQuery, Message], db: Session):
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ FAQ", reply_markup=get_question_management_kb()
    )

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "show_questions")
@router.message(F.text == ButtonText.Question.LIST)
@router.message(Command("list_questions"))
async def show_questions_handler(update: Union[CallbackQuery, Message], db: Session):
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        questions = load_questions()
        if not questions:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        questions_list = "\n\n".join(
            f"‚ùì {question}\nüí¨ {answer}" for question, answer in questions.items()
        )
        await message.answer(
            f"üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{questions_list}",
            reply_markup=get_question_management_kb(),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "add_question")
@router.message(F.text == ButtonText.Question.ADD)
@router.message(Command("add_question"))
async def add_question_handler(
    update: Union[CallbackQuery, Message], state: FSMContext, db: Session
):
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AdminStates.waiting_for_new_question_text)

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(AdminStates.waiting_for_new_question_text)
async def receive_question_text(message: Message, state: FSMContext):
    question = message.text.strip()
    if len(question) < 5:
        await message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(question_text=question)
    await message.answer("üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AdminStates.waiting_for_new_answer_text)


@router.message(AdminStates.waiting_for_new_answer_text)
async def receive_answer_text(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) < 5:
        await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    question = data.get("question_text")

    try:
        questions = load_questions()
        questions[question] = answer
        save_questions(questions)
        await message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
            reply_markup=get_question_management_kb(),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "remove_question")
@router.message(F.text == ButtonText.Question.REMOVE)
@router.message(Command("remove_question"))
async def remove_question_handler(
    update: Union[CallbackQuery, Message], state: FSMContext, db: Session
):
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        questions = load_questions()
        if not questions:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        numbered_questions = list(questions.items())
        text_list = "\n\n".join(
            f"{i + 1}. ‚ùì {q}\nüí¨ {a}" for i, (q, a) in enumerate(numbered_questions)
        )
        await state.update_data(numbered_questions=numbered_questions)

        await message.answer(
            f"üìã –í–æ–ø—Ä–æ—Å—ã:\n\n{text_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=get_question_management_kb()
        )
        await state.set_state(AdminStates.waiting_for_question_removal)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(AdminStates.waiting_for_question_removal)
async def remove_question(message: Message, state: FSMContext):
    try:
        index = int(message.text.strip()) - 1
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Ü–∏—Ñ—Ä—É).")
        return

    data = await state.get_data()
    numbered_questions = data.get("numbered_questions", [])

    if index < 0 or index >= len(numbered_questions):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return

    question_text = numbered_questions[index][0]

    try:
        questions = load_questions()
        if question_text in questions:
            del questions[question_text]
            save_questions(questions)
            await message.answer(
                f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{index + 1} —É–¥–∞–ª—ë–Ω.",
                reply_markup=get_question_management_kb()
            )
        else:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
    finally:
        await state.clear()

