from typing import Union

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from data.state import AdminStates
from keyboards.admin.adminInterface import AdminInterfaceText
from keyboards.admin.reply.operator import get_operator_management_kb
from models import UserRole
from services import UserService
from utils.access import check_admin_access
from utils.logger import logger

router = Router()


@router.callback_query(F.data == "operator_management")
@router.message(F.text == AdminInterfaceText.AdminMenu.OPERATOR_PANEL)
@router.message(Command("operators"))
async def operator_panel_handler(update: Union[CallbackQuery, Message], db: Session):
    logger.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", reply_markup=get_operator_management_kb()
    )

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "add_operator")
@router.message(F.text == AdminInterfaceText.Operator.ADD)
@router.message(Command("add_operator"))
async def add_operator_handler(
    update: Union[CallbackQuery, Message], db: Session, state: FSMContext
):
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –µ–≥–æ username (@username) –∏–ª–∏ ID"
    )
    await state.set_state(AdminStates.waiting_operator_username)

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "remove_operator")
@router.message(F.text == AdminInterfaceText.Operator.REMOVE)
@router.message(Command("remove_operator"))
async def remove_operator_handler(
    update: Union[CallbackQuery, Message], db: Session, state: FSMContext
):
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    if not await check_admin_access(update, db):
        return

    user_service = UserService(db)
    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        operators = user_service.get_users_by_role(UserRole.OPERATOR)
        if not operators:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        operator_list = "\n".join(f"üë§ @{op.username or op.tg_id}" for op in operators)
        await message.answer(
            f"–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n{operator_list}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∏–ª–∏ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
        await state.set_state(AdminStates.waiting_operator_removal_username)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(AdminStates.waiting_operator_username)
async def save_new_operator(message: Message, state: FSMContext, db: Session):
    input_data = message.text.strip().lstrip("@")
    user_service = UserService(db)

    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ ID
        user = (
            user_service.get_user_by_username(input_data)
            if not input_data.isdigit()
            else user_service.get_user(int(input_data))
        )

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.OPERATOR)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_operator_management_kb(),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@router.message(AdminStates.waiting_operator_removal_username)
async def remove_operator(message: Message, state: FSMContext, db: Session):
    input_data = message.text.strip().lstrip("@")
    user_service = UserService(db)

    try:
        user = (
            user_service.get_user_by_username(input_data)
            if not input_data.isdigit()
            else user_service.get_user(int(input_data))
        )

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if user.role != UserRole.OPERATOR:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä.")
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.USER)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=get_operator_management_kb(),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "show_operators")
@router.message(F.text == AdminInterfaceText.Operator.LIST)
@router.message(Command("list_operators"))
async def list_operators_handler(update: Union[CallbackQuery, Message], db: Session):
    logger.info("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    if not await check_admin_access(update, db):
        return

    user_service = UserService(db)
    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        operators = user_service.get_users_by_role(UserRole.OPERATOR)
        if not operators:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        operator_list = "\n".join(f"üë§ @{op.username or op.tg_id}" for op in operators)
        await message.answer(
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{operator_list}",
            reply_markup=get_operator_management_kb(),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()
