from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from data.state import AdminStates
from models import UserRole
from services import UserService
from utils.access import is_admin

router = Router()


@router.callback_query(F.data == "add_operator")
async def add_operator(callback: CallbackQuery, db: Session, state: FSMContext):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞(–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º) - –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É /start, "
        "–∞ –ø–æ—Å–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–ª–∞ —Å—é–¥–∞"
        "username (@username)."
    )
    await state.set_state(AdminStates.waiting_operator_username)
    await callback.answer()


@router.message(AdminStates.waiting_operator_username)
async def save_new_operator(message: Message, state: FSMContext, db: Session):
    username = message.text.strip().lstrip("@")

    try:
        user_service = UserService(db)
        user = user_service.get_user_by_username(username)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.OPERATOR)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_operator")
async def ask_operator_to_remove(
    callback: CallbackQuery, state: FSMContext, db: Session
):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        operators = user_service.get_users_by_role(UserRole.OPERATOR)
        if not operators:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            await callback.answer()
            return

        operator_list = "\n".join(
            [f"@{op.username or '‚Äî'} (ID: {op.tg_id})" for op in operators]
        )
        await callback.message.answer(
            f"üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{operator_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ tg_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        await state.set_state(AdminStates.waiting_operator_removal_username)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    await callback.answer()


@router.message(AdminStates.waiting_operator_removal_username)
async def remove_operator(message: Message, state: FSMContext, db: Session):
    input_value = message.text.strip().lstrip("@")
    user_service = UserService(db)

    try:
        if input_value.isdigit():
            user = user_service.get_user(int(input_value))
        else:
            user = user_service.get_user_by_username(input_value)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if user.role != "operator":
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.USER)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "show_operators")
async def get_operators(callback: CallbackQuery, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        operators = user_service.get_users_by_role(UserRole.OPERATOR)
        if not operators:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        else:
            operator_list = "\n".join(
                [f"@{op.username or '‚Äî'} (ID: {op.tg_id})" for op in operators]
            )
            await callback.message.answer(f"üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{operator_list}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()
