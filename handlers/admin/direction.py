from typing import Union

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy.orm import Session

from data.state import AdminStates
from keyboards.admin.adminInterface import AdminInterfaceText
from keyboards.admin.inline.direction import (
    confirm_direction_keyboard,
    get_direction_btn_list,
)
from keyboards.admin.reply.direction import get_direction_management_kb
from services import DirectionService
from utils.access import check_admin_access
from utils.logger import logger

router = Router()


@router.callback_query(F.data == "direction_management")
@router.message(F.text == AdminInterfaceText.AdminMenu.DIRECTION_PANEL)
async def operator_panel_handler(update: Union[CallbackQuery, Message], db: Session):
    logger.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        "üõ† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏</b>",
        reply_markup=get_direction_management_kb(),
        parse_mode="HTML",
    )
    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(F.text == AdminInterfaceText.Direction.ADD)
async def add_direction_handler(
    update: Union[CallbackQuery, Message],
    state: FSMContext,
    db: Session,
):
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        text="–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã\n"
        "–ö–æ–ª-–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç\n"
        "–ö–æ–ª-–≤–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏\n"
        "09.03.03\n"
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n"
        "150\n"
        "220\n"
        "220\n"
        "120000",
        parse_mode="HTML",
    )
    await state.set_state(AdminStates.waiting_new_direction_data)

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(AdminStates.waiting_new_direction_data)
async def save_new_direction(message: Message, state: FSMContext, db: Session):
    try:
        data = message.text.split('\n')
        if len(data) != 7:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        name, code, exams, budget, commerce, min_score, price = [
            item.strip() for item in data
        ]

        direction_service = DirectionService(db)
        direction_service.create_direction(
            name=name,
            code=code,
            exams=exams,
            budget=int(budget),
            commerce=int(commerce),
            min_score=int(min_score),
            price=int(price),
        )

        await message.answer(
            f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_direction_management_kb(),
            parse_mode="HTML",
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@router.message(F.text == AdminInterfaceText.Direction.REMOVE)
async def remove_direction_handler(update: Union[CallbackQuery, Message], db: Session):
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    if not await check_admin_access(update, db):
        return

    direction_service = DirectionService(db)
    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        directions = direction_service.get_all_directions()
        if not directions:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
            return

        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=await get_direction_btn_list(directions=directions),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "direction_list")
@router.message(F.text == AdminInterfaceText.Direction.LIST)
async def admin_educational_programs_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")

    direction_service = DirectionService(db)
    directions = direction_service.get_all_directions()

    if len(directions) == 0:
        await message.answer(
            text="üìö <b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø—É—Å—Ç</b>",
            parse_mode="HTML",
        )
    else:
        await message.answer(
            text="üìö <b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º</b>",
            reply_markup=await get_direction_btn_list(
                directions=directions, undecided_btn=False
            ),
            parse_mode="HTML",
        )


async def render_direction_detail(
    message: Message,
    direction,
    is_admin: bool,
    answer: bool = False,
):
    exams_list = ", ".join(exam.strip() for exam in direction.exams.split(','))
    info_text = (
        f"<b>üéì {direction.name}</b> (<code>{direction.code}</code>)\n\n"
        f"<b>üìö –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã:</b> {exams_list}\n"
        f"<b> –ö–æ–ª-–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {direction.budget}</b>\n"
        f"<b> –ö–æ–ª-–≤–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç: {direction.commerce}</b>\n"
        f"<b>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {direction.min_score}\n"
        f"<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</b> {direction.price:,} —Ä—É–±./–≥–æ–¥\n\n"
    ).replace(",", "‚Äâ")

    if answer:
        await message.answer(
            info_text,
            reply_markup=confirm_direction_keyboard(direction.name, is_admin),
            parse_mode="HTML",
        )
    else:
        await message.edit_text(
            info_text,
            reply_markup=confirm_direction_keyboard(direction.name, is_admin),
            parse_mode="HTML",
        )


@router.callback_query(F.data.startswith("direction_info_"))
async def show_direction_info(callback: CallbackQuery, db: Session):
    logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
    direction_service = DirectionService(db)
    name = callback.data.removeprefix("direction_info_")
    print(name)
    direction = direction_service.get_direction_by_name(name)

    if not direction:
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    is_admin = await check_admin_access(callback, db)
    await render_direction_detail(callback.message, direction, is_admin)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("direction_delete_"))
async def delete_direction_handler(callback: CallbackQuery, db: Session):
    try:
        name = callback.data.removeprefix("direction_delete_")
        direction_service = DirectionService(db)
        direction = direction_service.get_direction_by_name(name)
        logger.info(
            f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –æ–±—Ä. –ø—Ä–æ–≥—Ä–∞–º–º—É —Å name: {name} –∏ id: {direction.id}"
        )
        if not direction:
            await callback.answer("‚ùå –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        confirm_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"confirm_direction_delete_{direction.name}",
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"direction_info_{direction.name}",
                    ),
                ]
            ]
        )

        try:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É <b>{direction.name}</b>?",
                reply_markup=confirm_kb,
                parse_mode="HTML",
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
    except Exception as e:
        logger.error(f"Error in delete handler: {e}")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_direction_delete_"))
async def confirm_delete_direction(callback: CallbackQuery, db: Session):
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä. –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    try:
        name = callback.data.removeprefix("confirm_direction_delete_")
        direction_service = DirectionService(db)
        direction = direction_service.get_direction_by_name(name)

        if not direction:
            await callback.answer("‚ùå –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        direction_service.delete_direction(direction.id)
        await callback.message.delete()
        await callback.message.answer(
            f"üóëÔ∏è –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ {direction.name} —É–¥–∞–ª–µ–Ω–æ!"
        )
    except Exception as e:
        logger.error(f"Error confirming delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
@router.callback_query(F.data.startswith("direction_edit_"))
async def edit_direction_handler(
    callback: CallbackQuery, state: FSMContext, db: Session
):
    name = callback.data.removeprefix("direction_edit_")
    direction_service = DirectionService(db)
    print(name)
    direction = direction_service.get_direction_by_name(name)

    if not direction:
        await callback.answer("‚ùå –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    logger.info(
        f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction.name}"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(edit_direction_id=direction.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    current_data = (
        f"{direction.name}\n"
        f"{direction.code}\n"
        f"{direction.exams}\n"
        f"{direction.budget}\n"
        f"{direction.commerce}\n"
        f"{direction.min_score}\n"
        f"{direction.price}"
    )

    back_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"direction_info_{direction.name}"
                )
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await callback.message.edit_text(
        text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã <b>{direction.name}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã\n"
        "–ö–æ–ª-–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç\n"
        "–ö–æ–ª-–≤–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</code>\n\n"
        "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"{current_data}\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é",
        reply_markup=back_kb,
        parse_mode="HTML",
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(AdminStates.waiting_edit_direction_data)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(AdminStates.waiting_edit_direction_data)
async def save_edited_direction(message: Message, state: FSMContext, db: Session):
    data = await state.get_data()
    direction_id = data.get('edit_direction_id')
    direction_service = DirectionService(db)

    if not direction_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        await state.clear()
        return

    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data = message.text.split('\n')
        if len(new_data) != 7:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è 7 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")

        name, code, exams, budget, commerce, min_score, price = [
            item.strip() for item in new_data
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_service.update_direction(
            direction_id,
            name=name,
            code=code,
            exams=exams,
            budget=int(budget),
            commerce=int(commerce),
            min_score=int(min_score),
            price=int(price),
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        updated_direction = direction_service.get_direction_by_id(direction_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        is_admin = await check_admin_access(message, db)
        await render_direction_detail(message, updated_direction, is_admin, True)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    finally:
        await state.clear()
