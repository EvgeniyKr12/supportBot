from typing import Union
from utils.logger import logger
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from data.state import AdminStates
from keyboards.admin.base import get_confirmation_kb
from keyboards.admin.inline.inline import get_directions_list_kb
from keyboards.admin.reply.direction import get_direction_management_kb
from keyboards.admin.text import ButtonText
from services import DirectionService
from utils.access import check_admin_access


router = Router()


@router.callback_query(F.data == "direction_management")
@router.message(F.text == ButtonText.AdminMenu.DIRECTION_PANEL)
@router.message(Command("directions"))
async def direction_panel_handler(update: Union[CallbackQuery, Message], db: Session,):
    logger.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        text=ButtonText.AdminMenu.DIRECTION_PANEL, reply_markup=get_direction_management_kb()
    )

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data == "add_direction")
@router.message(F.text == ButtonText.Direction.ADD)
@router.message(Command("add_direction"))
async def add_direction_handler(
    update: Union[CallbackQuery, Message], state: FSMContext, db: Session,
):
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    if not await check_admin_access(update, db):
        return

    message = update.message if isinstance(update, CallbackQuery) else update
    await message.answer(
        text="–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏\n"
        "CS101\n"
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n"
        "220\n"
        "120000</code>",
        parse_mode="HTML",
    )
    await state.set_state(AdminStates.waiting_new_direction_data)

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.message(AdminStates.waiting_new_direction_data)
async def save_new_direction(message: Message, state: FSMContext, db: Session):
    try:
        data = message.text.split('\n')
        if len(data) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        name, code, exams, min_score, price = [item.strip() for item in data]

        direction_service = DirectionService(db)
        direction_service.create_direction(
            name=name,
            code=code,
            exams=exams,
            min_score=int(min_score),
            price=int(price),
        )

        await message.answer(
            f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_direction_management_kb(),
            parse_mode="HTML",
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "remove_direction")
@router.message(F.text == ButtonText.Direction.REMOVE)
@router.message(Command("remove_direction"))
async def remove_direction_handler(update: Union[CallbackQuery, Message], db: Session):
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    if not await check_admin_access(update, db):
        return

    direction_service = DirectionService(db)
    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        directions = direction_service.get_all_directions()
        if not directions:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
            return

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=get_directions_list_kb(directions, action="remove"),
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()


@router.callback_query(F.data.startswith("remove_direction_"))
async def confirm_remove_direction(callback: CallbackQuery, db: Session):
    direction_id = int(callback.data.split('_')[-1])
    direction_service = DirectionService(db)

    try:
        direction = direction_service.get_direction_by_id(direction_id)
        if not direction:
            await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        await callback.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{direction.name}</b>?",
            reply_markup=get_confirmation_kb(f"confirm_remove_{direction_id}"),
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_remove_"))
async def execute_remove_direction(callback: CallbackQuery, db: Session):
    direction_id = int(callback.data.split('_')[-1])
    direction_service = DirectionService(db)

    try:
        direction = direction_service.get_direction_by_id(direction_id)
        if not direction:
            await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        direction_service.delete_direction(direction_id)
        await callback.message.answer(
            f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{direction.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=get_direction_management_kb(),
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data == "show_directions")
@router.message(F.text == ButtonText.Direction.LIST)
@router.message(Command("list_directions"))
async def list_directions_handler(update: Union[CallbackQuery, Message], db: Session,):
    logger.info("–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    if not await check_admin_access(update, db):
        return

    direction_service = DirectionService(db)
    message = update.message if isinstance(update, CallbackQuery) else update

    try:
        directions = direction_service.get_all_directions()
        if not directions:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
            return

        directions_list = "\n\n".join(
            f"üìå <b>{d.name}</b> ({d.code})\n"
            f"üìù –≠–∫–∑–∞–º–µ–Ω—ã: {d.exams}\n"
            f"üéØ –ú–∏–Ω. –±–∞–ª–ª: {d.min_score}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {d.price} —Ä—É–±."
            for d in directions
        )

        await message.answer(
            f"üìö –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n\n{directions_list}",
            reply_markup=get_direction_management_kb(),
            parse_mode="HTML",
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    if isinstance(update, CallbackQuery):
        await update.answer()
