from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session
from config.constants import set_new_greeting, load_questions, save_questions
from data.state import AdminStates
from keyboards.admin.inlineKeyboard import get_options_keyboard
from keyboards.admin.replyKeyboard import ReplyButtonText
from services.user import (
    get_user_by_username,
    change_user_role,
    get_users_with_role,
    get_user_by_tg_id,
)

router = Router()


def is_admin(user):
    return user and user.role in ("admin", "super-admin")


@router.message(Command(ReplyButtonText.ADMIN_PANEL))
@router.message(F.text == ReplyButtonText.ADMIN_PANEL)
async def show_admin_panel(message: Message, db: Session):
    user = await get_user_by_tg_id(message.from_user.id, db)
    if not is_admin(user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é",
        reply_markup=get_options_keyboard(user.role == "super-admin"),
    )


@router.callback_query(F.data == "change_greeting")
async def change_greeting_text(callback: CallbackQuery, db: Session, state: FSMContext):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(AdminStates.waiting_for_new_greeting)
    await callback.answer()


@router.message(AdminStates.waiting_for_new_greeting)
async def save_new_greeting(message: Message, state: FSMContext):
    new_text = message.text.strip()
    try:
        set_new_greeting(new_text)
        await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "add_operator")
async def add_operator(callback: CallbackQuery, db: Session, state: FSMContext):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start "
        "–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–≤–æ–π username (@username)."
    )
    await state.set_state(AdminStates.waiting_operator_username)
    await callback.answer()


@router.message(AdminStates.waiting_operator_username)
async def save_new_operator(message: Message, state: FSMContext, db: Session):
    username = message.text.strip().lstrip("@")

    try:
        user = await get_user_by_username(username, db)
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await change_user_role(user.tg_id, "operator", db)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_operator")
async def ask_operator_to_remove(callback: CallbackQuery, state: FSMContext, db: Session):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        operators = await get_users_with_role("operator", db)
        if not operators:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            await callback.answer()
            return

        operator_list = "\n".join(
            [f"@{op.username or '‚Äî'} (ID: {op.tg_id})" for op in operators]
        )
        await callback.message.answer(
            f"üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{operator_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ @) –∏–ª–∏ tg_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        await state.set_state(AdminStates.waiting_operator_removal_username)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    await callback.answer()


@router.message(AdminStates.waiting_operator_removal_username)
async def remove_operator(message: Message, state: FSMContext, db: Session):
    input_value = message.text.strip().lstrip("@")

    try:
        if input_value.isdigit():
            user = await get_user_by_tg_id(int(input_value), db)
        else:
            user = await get_user_by_username(input_value, db)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if user.role != "operator":
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            return

        await change_user_role(user.tg_id, "user", db)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "show_operators")
async def get_operators(callback: CallbackQuery, db: Session):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        operators = await get_users_with_role("operator", db)
        if not operators:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        else:
            operator_list = "\n".join(
                [f"@{op.username or '‚Äî'} (ID: {op.tg_id})" for op in operators]
            )
            await callback.message.answer(f"üëÆ‚Äç‚ôÇÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{operator_list}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()


@router.callback_query(F.data == "show_questions")
async def show_questions(callback: CallbackQuery, db: Session):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        questions = load_questions()
        if not questions:
            await callback.message.answer("üì≠ –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = "\n\n".join(
                [f"‚ùì {q}\nüí¨ {a}" for q, a in questions.items()]
            )
            await callback.message.answer(f"üìö –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{text}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    await callback.answer()


@router.callback_query(F.data == "add_question")
async def ask_new_question(callback: CallbackQuery, state: FSMContext, db: Session):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AdminStates.waiting_for_new_question_text)
    await callback.answer()


@router.message(AdminStates.waiting_for_new_question_text)
async def receive_question_text(message: Message, state: FSMContext):
    await state.update_data(question_text=message.text.strip())
    await message.answer("üí¨ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(AdminStates.waiting_for_new_answer_text)


@router.message(AdminStates.waiting_for_new_answer_text)
async def receive_answer_text(message: Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("question_text")
    answer = message.text.strip()

    try:
        questions = load_questions()
        questions[question] = answer
        save_questions(questions)
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_question")
async def ask_question_to_remove(callback: CallbackQuery, state: FSMContext, db: Session):
    user = await get_user_by_tg_id(callback.from_user.id, db)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    questions = load_questions()
    if not questions:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await callback.answer()
        return

    question_list = "\n".join([f"‚Ä¢ {q}" for q in questions.keys()])
    await callback.message.answer(
        f"üìÑ –¢–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{question_list}\n\n‚úÇÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
    )
    await state.set_state(AdminStates.waiting_for_question_removal)
    await callback.answer()


@router.message(AdminStates.waiting_for_question_removal)
async def remove_question(message: Message, state: FSMContext):
    question = message.text.strip()
    try:
        questions = load_questions()
        if question not in questions:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            del questions[question]
            save_questions(questions)
            await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    await state.clear()

