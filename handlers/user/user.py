from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session

from keyboards.admin.inline.direction import get_direction_btn_list
from keyboards.admin.inline.profile import get_about_user_inline_kb
from keyboards.user.inline.user_type import UserTypeButtonText
from keyboards.user.userInterface import UserInterfaceText
from models import UserType
from services import DirectionService, UserService
from utils.logger import logger

router = Router()


@router.message(F.text == UserInterfaceText.ABOUT_UNIVERSITY)
async def about_university_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ")
    await message.answer(
        "üè´ <b>–ò–°–¢ ¬´–¢-—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç¬ª</b> ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, "
        "–≥–¥–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ.",
        parse_mode="HTML",
    )


@router.message(F.text == UserInterfaceText.EDUCATIONAL_PROGRAMS)
async def educational_programs_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")
    direction_service = DirectionService(db)
    directions = direction_service.get_all_directions()

    if len(directions) == 0:
        await message.answer(
            text="üìö <b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø—É—Å—Ç</b>",
            parse_mode="HTML",
        )
    else:
        await message.answer(
            text="üìö <b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º</b>",
            reply_markup=await get_direction_btn_list(directions),
            parse_mode="HTML",
        )


@router.message(F.text == UserInterfaceText.CONNECTION)
async def connection_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö")
    await message.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "‚úâÔ∏è Email: info@t-university.ru",
        parse_mode="HTML",
    )


@router.message(F.text == UserInterfaceText.ASK_QUESTION)
async def ask_question_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    await message.answer(
        "üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç</b>, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!",
        parse_mode="HTML",
    )


@router.message(F.text == UserInterfaceText.PROFILE)
async def about_user_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å")
    user_service = UserService(db)
    direction_service = DirectionService(db)

    user = user_service.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    type_map = {
        UserType.APPLICANT: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç üéì",
        UserType.PARENT: "–†–æ–¥–∏—Ç–µ–ª—å üë®‚Äçüë©‚Äçüëß",
        UserType.OTHER: "–ò–Ω–æ–µ ‚ùì",
    }
    user_type_str = type_map.get(user.type, "–ù–µ –≤—ã–±—Ä–∞–Ω")

    direction = (
        direction_service.get_direction_by_id(user.direction_id)
        if user.direction_id
        else None
    )
    direction_str = direction.name if direction else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    text = (
        f"üßæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: <b>{user.username}</b>\n"
        f"üéì –¢–∏–ø: <b>{user_type_str}</b>\n"
        f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction_str}</b>"
    )

    await message.answer(
        text, reply_markup=get_about_user_inline_kb(), parse_mode="HTML"
    )


@router.callback_query(F.data == "change_type")
async def change_type(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–∏–ø")
    builder = InlineKeyboardBuilder()
    builder.button(text="üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", callback_data=UserTypeButtonText.SET_APPLICANT)
    builder.button(text="üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", callback_data=UserTypeButtonText.SET_PARENT)
    builder.button(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data=UserTypeButtonText.SET_OTHER)
    builder.adjust(1)

    await callback.message.edit_text(
        text="üîÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "change_direction")
async def change_direction(callback: CallbackQuery, db: Session):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    direction_service = DirectionService(db)
    directions = direction_service.get_all_directions()

    if len(directions) == 0:
        await callback.answer(
            text="üìö <b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø—É—Å—Ç</b>",
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=await get_direction_btn_list(
                directions=directions, undecided_btn=True
            ),
            parse_mode="HTML",
        )
    await callback.answer()
