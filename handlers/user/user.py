from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.orm import Session

from handlers.admin.direction import list_directions_handler
from keyboards.user.inlineKeyboard import choose_user_status
from keyboards.user.replyKeyboard import ReplyButtonText
from services import UserService
from utils.logger import logger

router = Router()


@router.callback_query(F.data == "about_university")
@router.message(F.text == ReplyButtonText.ABOUT_UNIVERSITY)
@router.message(Command("about_university"))
async def about_university_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ")
    await message.answer(
        "üè´ –ò–°–¢ ¬´–¢-—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç¬ª ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞..."
    )


@router.callback_query(F.data == "show_programs")
@router.message(F.text == ReplyButtonText.EDUCATIONAL_PROGRAMS)
@router.message(Command('show_programs'))
async def educational_programs_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")
    await list_directions_handler(message, db, False)


@router.message(F.text == ReplyButtonText.CONNECTION)
@router.message(Command(ReplyButtonText.CONNECTION))
async def connection_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö")
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\nEmail: info@t-university.ru"
    )


@router.message(F.text == ReplyButtonText.ASK_QUESTION)
@router.message(Command(ReplyButtonText.ASK_QUESTION))
async def ask_question_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    user_service = UserService(db)
    user = user_service.get_user(message.from_user.id)

    if not user or not user.type:
        await message.answer(
            "–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–£–∫–∞–∂–∏—Ç–µ, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å:",
            reply_markup=choose_user_status(),
        )
        return

    await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
