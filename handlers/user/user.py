from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from handlers.admin.direction import list_directions_handler
from keyboards.admin.inline.inline import get_about_user_inline_kb
from keyboards.user.replyKeyboard import ReplyButtonText
from models import UserType
from services import DirectionService, UserService
from utils.logger import logger

router = Router()


@router.callback_query(F.data == "about_university")
@router.message(F.text == ReplyButtonText.ABOUT_UNIVERSITY)
@router.message(Command("about_university"))
async def about_university_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ")
    await message.answer(
        "üè´ –ò–°–¢ ¬´–¢-—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç¬ª ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞..."
    )


@router.callback_query(F.data == "show_programs")
@router.message(F.text == ReplyButtonText.EDUCATIONAL_PROGRAMS)
@router.message(Command('show_programs'))
async def educational_programs_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö")
    await list_directions_handler(message, db, False)


@router.message(F.text == ReplyButtonText.CONNECTION)
@router.message(Command(ReplyButtonText.CONNECTION))
async def connection_handler(message: Message):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö")
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\nEmail: info@t-university.ru"
    )


@router.message(F.text == ReplyButtonText.ASK_QUESTION)
@router.message(Command(ReplyButtonText.ASK_QUESTION))
async def ask_question_handler(message: Message, db: Session):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    user_service = UserService(db)
    user = user_service.get_user(message.from_user.id)

    await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")


@router.message(F.text == "üë®‚Äçüéì –û –≤–∞—Å")
async def about_user_handler(message: Message, db: Session):
    user_service = UserService(db)
    direction_service = DirectionService(db)

    user = user_service.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    type_map = {
        UserType.APPLICANT: "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç",
        UserType.PARENT: "–†–æ–¥–∏—Ç–µ–ª—å",
        UserType.OTHER: "–ò–Ω–æ–µ",
    }
    user_type_str = type_map.get(user.type, "–ù–µ –≤—ã–±—Ä–∞–Ω")

    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    direction = (
        direction_service.get_direction_by_id(user.direction_id)
        if user.direction_id
        else None
    )
    direction_str = direction.name if direction else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    text = (
        f"üßæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
        f"–ù–∏–∫–Ω–µ–π–º: {user.username}\n"
        f"üë§ –¢–∏–ø: <b>{user_type_str}</b>\n"
        f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{direction_str}</b>"
    )

    await message.answer(
        text, reply_markup=get_about_user_inline_kb(), parse_mode="HTML"
    )


@router.callback_query(F.data == "change_type")
async def change_type(callback: CallbackQuery):
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    from keyboards.user.inlineKeyboard import InlineButtonText

    builder = InlineKeyboardBuilder()
    builder.button(text="üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", callback_data=InlineButtonText.SET_APPLICANT)
    builder.button(text="üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", callback_data=InlineButtonText.SET_PARENT)
    builder.button(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data=InlineButtonText.SET_OTHER)
    builder.adjust(1)

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:", reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "change_direction")
async def change_direction(callback: CallbackQuery, db: Session):
    from keyboards.user.inlineKeyboard import choose_direction

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=await choose_direction(db)
    )
    await callback.answer()
