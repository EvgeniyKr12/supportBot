from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import Session

from data.state import AdminStates
from models import UserRole
from services import UserService


router = Router()


def is_admin(user):
    return user and user.role == "super-admin"


@router.callback_query(F.data == "add_admin")
async def add_admin(callback: CallbackQuery, state: FSMContext, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    await callback.message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞(–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ "
        "–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º) - –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "/start, –∞ –ø–æ—Å–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–ª–∞ —Å—é–¥–∞"
        "username (@username) –∏–ª–∏ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "—á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:"
    )
    await state.set_state(AdminStates.waiting_admin_username)
    await callback.answer()


@router.message(AdminStates.waiting_admin_username)
async def save_new_admin(message: Message, state: FSMContext, db: Session):
    input_value = message.text.strip().lstrip("@")
    user_service = UserService(db)

    try:
        if input_value.isdigit():
            user = user_service.get_user(int(input_value))
        else:
            user = user_service.get_user_by_username(input_value)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if user.role == "admin":
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.ADMIN)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()


@router.callback_query(F.data == "remove_admin")
async def ask_admin_to_remove(callback: CallbackQuery, state: FSMContext, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        admins = user_service.get_users_by_role(UserRole.ADMIN)
        if not admins:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await callback.answer()
            return

        admin_list = "\n".join(
            [f"@{admin.username or '‚Äî'} (ID: {admin.tg_id})" for admin in admins]
        )
        await callback.message.answer(
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n{admin_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ username —Å @ –∏–ª–∏ tg_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        await state.set_state(AdminStates.waiting_admin_removal_username)
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}"
        )
    await callback.answer()


@router.message(AdminStates.waiting_admin_removal_username)
async def remove_admin(message: Message, state: FSMContext, db: Session):
    input_value = message.text.strip().lstrip("@")
    user_service = UserService(db)

    try:
        if input_value.isdigit():
            user = user_service.get_user(int(input_value))
        else:
            user = user_service.get_user_by_username(input_value)

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        if user.role != "admin":
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            return

        user_service.change_role(user.tg_id, UserRole.USER)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.tg_id} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()


@router.callback_query(F.data == "show_admins")
async def get_admins(callback: CallbackQuery, db: Session):
    user_service = UserService(db)
    user = user_service.get_user(callback.from_user.id)
    if not is_admin(user):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return

    try:
        admins = user_service.get_users_by_role(UserRole.ADMIN)
        if not admins:
            await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            admin_list = "\n".join(
                [f"@{admin.username or '‚Äî'} (ID: {admin.tg_id})" for admin in admins]
            )
            await callback.message.answer(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n{admin_list}")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()
